// Generated by CoffeeScript 1.12.7
(function() {
  var RedisStore, UrlUtils, _, moment, redis,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  moment = require('moment');

  UrlUtils = require('url');

  redis = require('redis');

  module.exports = RedisStore = (function() {
    function RedisStore(options) {
      this.parse = bind(this.parse, this);
      this.destroy = bind(this.destroy, this);
      this.destroyHashKey = bind(this.destroyHashKey, this);
      this.get = bind(this.get, this);
      this.set = bind(this.set, this);
      this.hget = bind(this.hget, this);
      this.hset = bind(this.hset, this);
      var host, parsed_url, password, port, redis_options, ref, url;
      url = options.url, port = options.port, host = options.host, password = options.password, redis_options = options.redis_options, this.timeout = options.timeout;
      if (url) {
        parsed_url = UrlUtils.parse(url);
        port = parsed_url.port;
        host = parsed_url.hostname;
        password = (ref = parsed_url.auth) != null ? ref.split(':')[1] : void 0;
      }
      this.client = redis.createClient(port, host, redis_options);
      if (password) {
        this.client.auth(password);
      }
    }

    RedisStore.prototype.hset = function(hash, key, value, callback) {
      if (value) {
        value = {
          value: value,
          _redis_set_at: moment().utc().toDate().toISOString()
        };
      }
      return this.client.hset(hash, key, JSON.stringify(value), callback);
    };

    RedisStore.prototype.hget = function(hash, key, callback) {
      return this.client.hget(hash, key, (function(_this) {
        return function(err, result) {
          var now, value;
          if (err) {
            return callback(err);
          }
          result = _this.parse(result);
          value = result != null ? result.value : void 0;
          if (result != null ? result._redis_set_at : void 0) {
            now = moment().utc();
            if (now.diff(result._redis_set_at) > _this.timeout) {
              return _this.destroyHashKey(hash, key, function(err) {
                return callback(err);
              });
            } else {
              return callback(null, value);
            }
          } else {
            return callback(null, value);
          }
        };
      })(this));
    };

    RedisStore.prototype.set = function(hash, key, value, callback) {
      if (arguments.length === 4) {
        return this.hset(hash, key, value, callback);
      }
      callback = value;
      value = key;
      key = hash;
      if (this.timeout) {
        return this.client.psetex(key, this.timeout, JSON.stringify(value), callback);
      } else {
        return this.client.set(key, JSON.stringify(value), callback);
      }
    };

    RedisStore.prototype.get = function(hash, key, callback) {
      if (arguments.length === 3) {
        return this.hget(hash, key, callback);
      }
      callback = key;
      key = hash;
      return this.client.get(key, (function(_this) {
        return function(err, result) {
          if (err) {
            return callback(err);
          }
          return callback(null, _this.parse(result));
        };
      })(this));
    };

    RedisStore.prototype.destroyHashKey = function(hash, key, callback) {
      return this.client.hdel(hash, key, callback);
    };

    RedisStore.prototype.destroy = function(key, callback) {
      return this.client.del(key, callback);
    };

    RedisStore.prototype.reset = function(callback) {
      return this.client.flushall(callback);
    };

    RedisStore.prototype.parse = function(values) {
      var date, err, key, result, value;
      if (_.isNull(values) || (values === 'null')) {
        return null;
      }
      if (_.isDate(values)) {
        return values;
      }
      if (_.isArray(values)) {
        return _.map(values, this.parse);
      }
      if (_.isObject(values)) {
        result = {};
        for (key in values) {
          value = values[key];
          result[key] = this.parse(value);
        }
        return result;
      } else if (_.isString(values)) {
        try {
          if ((values.length >= 20) && values[values.length - 1] === 'Z') {
            date = moment.utc(values);
            if (date && date.isValid()) {
              return date.toDate();
            } else {
              return values;
            }
          }
          if (values = JSON.parse(values)) {
            return this.parse(values);
          }
        } catch (error) {
          err = error;
        }
      }
      return values;
    };

    return RedisStore;

  })();

}).call(this);
